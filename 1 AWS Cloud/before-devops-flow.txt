Before Devops Engg--- here this is an example when we dont have a devops engg or devops team.

1. Dev team
-writes the source code and checks in the code into the remote repository.
- creates branches.
-- writes logic to build the compile the code.
-- maintains pom.xml file in which all the build logic is written to build jar/war/ear etc.

2. repository
- this is a remote repository or a common location where source code is stored.
-- maintained by dev team or build and release team.

3. artifactory
- Developer with the help of build tools such and maven, builds the source code, i.e compiles .java to .class and packages to .jar files acoordingly as per requirement,
with the help of pom.xml where all the build logic/compilation logic is written.

- here the build and release team can also do the build, by build means just get the pom.xml file from dev team and further run few commands.

4. Build/Release team
- Can build the source code from repository and publish the jars in artifactory.
-this team pulls the code from artifactory, again with the help of maven packages the jar files into WAR/EAR as per application.
-WAR/EAR is nothing but collection of .jar files, jsp files, property files etc.... all the code jars is packaged into a archive.
(WAR - WEB-ARCHIVE) (EAR- Enterprize archive) (jar -- Java Archive)

- Futher build and release team deployed the code (war/ear) into below QA/UAT/PRE-PROD envs.

5. QA env:- for QA testing
6. UAT env- for UAT testing,i.e user acceptance testing where user scenarios are tested.
7. Pre-prod Env or staging env:- this env is same like production.

note --- Sometimes, once the code is working as planned in qa and uat then only its fwded to pre-prod and if the bug or error is found its given back to dev team or build and release team.
then again code fixes are done from dev team and pushed to the repository from where the cycle continues.

8. Production Env;- this is the most imp Env, as on this env our client/customer (10) uses/accesses the application. 
--- this is a very critical env, as client billing is impacted from here.
-- no downtime expected


9. Prod Support team:- This team is responsible for maintaing the performance env. below are some of the tasks.
- deploy war/ear on the server hosted on production env.
- this team can take war/ear from pre-prod env or co-ordinate accordingly with build and release team.
- maintenance of VMs in prod env, also maintenance of the server hosting application.
- making sure this env is 24*7 available to the client.

note:- in some cases the system admin team and the DB team can also manage the VMS and database operations but the application server management is handled completely by prod support.
-- most of the time this team does everything for there env --- database activities, war deployments, vm management, server management.

10.client -- he is the end user of the application, if he has any issues he can contact client support team (11)
11. client support team -- lodges issues/complaints etc or may be takes review from customer and fwds it to product owners, managers, BA's, ETC

12. system admins- QA/UAT/PRE-PROD/perf env VMs etc are managed by this team, mostly linux pactching, instance creation, increasing/decresing RAM/CPU, VM version update.
sometime networking team can also be a part of this. all these activities are taking care.

note:- in some projects for production env as well this team takes care of the above listed tasks. 

13. application server support:- deploys application on servers such as tomcat/weblogic/jboss in QA/UAT/PRE_PROD envs.
--also takes care of patching activities of those servers.
--log monitoring
--version upgrade
--troubleshooting incase of issues releated to server.
-- server monitoring.

14. DB support -- manages databases for QA/UAT/Pre-prod envs also in some cases for performance and production as well .
--- updating DB tables
-- db patching etc

15. IT operations team:-
- Fetch logs from various envs,
- check application data
-- create reports based on application data logs etc also represents graphically whatever the findings are.

16. reports- the reports generated by it operations team is then shared with BA/PO/managers etc to see if some improvements are needed or not.
-- this is also shared with clients if asked for.

17. Performance team--
-- this checks the performance of the application/software by doing some performance testing such as applying maxmimun load, generate report and share with the BA/PO/management etc.

eg-- for a website will apply load upto 1million users for seconds just to check when the site will crash

-- this performance team has its seperate env which is again like production or similar to it.

-- performance team gets the war from build team and deploys it on there machine, or else they themselfs can war from artifactory.

--for performance the VMs and DB are managed by system admin team and DB admin team

note:- in some cases performance team just takes care of the performance testing, and the rest of the application server deployment or management is done by our application support team.
 

18. Performace env-

-- the machines/instances are managed by the system admin teams.
-- DB managed by db support
-- application server may or may not be managed by application support team, again in some cases perf env manage application servers as they have to make settings to that to run there tests.